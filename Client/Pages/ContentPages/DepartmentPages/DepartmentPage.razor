@implements IDisposable
@if (allState.ShowDepartment)
{
	<div class="continer mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">Departments</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"></i> Add Department </button>
					</div>
					<div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">Id</th>
										<th scope="col">General Department</th>
										<th scope="col">Department</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Departments is not null)
									{
										int count = 1;
										foreach (var item in Departments)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.Id</td>
												<td>@item.DepartamentoGeral!.Nome</td>
												<td>@item.Nome</td>
												<td>
													<i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"><i class="bi bi-pencil-square"></i> Edit</i>
													<i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"><i class="bi bi-trash3"></i> Delete</i>
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4"><div class="alert alert-info text-center">Nenhum departamento adicionado ainda!</div></td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
	#cursorStyle {
		cursor: pointer;
	}
</style>

<DepartmentDialog href="departmentDialog"
				  HandleSaveOperationEvent="HandleSaveOperationEvent"
				  Departament="Departament"
				  GeneralDepartments="GeneralDepartments" />

@code {
	public string Title { get; set; } = "Add";
	DepartmentDialog? departmentDialog;
	public Departamento Departament { get; set; } = new();
	public List<DepartamentoGeral> GeneralDepartments { get; set; } = new();
	public List<Departamento> Departments { get; set; } = new();
	protected async override Task OnInitializedAsync()
	{
		await GetDepartments();
		await GetGeneralDepartments();
		allState.Action += StateHasChanged;
	}

	public async Task GetDepartments()
	{
		Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
	}

	private async Task GetGeneralDepartments()
	{
		GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
	}

	void AddButtonClicked()
	{
		departmentDialog?.ChangeTitle("Add");
		Departament = new();
		OpenDialog();
	}

	void OpenDialog()
	{
		departmentDialog?.OpenDialog();
	}

	private async Task HandleSaveOperationEvent(Departamento departament)
	{
		bool successCheck = false;
		if (Departament.Id > 0)
		{
			var result = await departmentService.Update(departament, Constants.DepartmentBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var response = await departmentService.Insert(departament, Constants.DepartmentBaseUrl);
			successCheck = await DisplayMessage(response.Flag, response.Message);
		}
		if (successCheck)
		{
			Departament = new();
			await GetDepartments();
			departmentDialog?.ChangeTitle("Add");
		}
	}

	private void EditClicked(Departamento dep)
	{
		departmentDialog?.ChangeTitle("Update");
		Departament = dep;
		OpenDialog();
	}

	private async Task DeleteClicked(Departamento departament)
	{
		bool confirm = await dialogService.ConfirmAsync($"Você tem certeza de que deseja excluir {departament.Nome}?", "Confirmar Exclusãpo");

		if (!confirm)
			return;

		var response = await departmentService.DeleteById(departament.Id, Constants.DepartmentBaseUrl);
		var result = await DisplayMessage(response.Flag, response.Message);

		if (result)
			await GetDepartments();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "Success");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "Alert!");
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
	}
